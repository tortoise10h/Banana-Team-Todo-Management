// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Team_Todo_Management.Data;

namespace Team_Todo_Management.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201206033118_AllowStartDateAndEndDateOfTodoNullable")]
    partial class AllowStartDateAndEndDateOfTodoNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c2d4b743-d9da-443c-9f5a-c2682750c805",
                            ConcurrencyStamp = "37278a68-eccc-4c55-a817-fa8facf5212b",
                            Name = "Boss",
                            NormalizedName = "boss"
                        },
                        new
                        {
                            Id = "b979036b-d165-4bea-b6b6-16b22a3f54dd",
                            ConcurrencyStamp = "6e314d07-f525-4e68-bbbc-364f2738d590",
                            Name = "Staff",
                            NormalizedName = "staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e9012ef1-cd3c-49a1-8726-7f8f8aba9f98",
                            RoleId = "c2d4b743-d9da-443c-9f5a-c2682750c805"
                        },
                        new
                        {
                            UserId = "3b488e0f-eb92-4994-a555-cbe4ecdf3672",
                            RoleId = "c2d4b743-d9da-443c-9f5a-c2682750c805"
                        },
                        new
                        {
                            UserId = "52999f6b-a605-45b0-b98f-b8880fc46027",
                            RoleId = "c2d4b743-d9da-443c-9f5a-c2682750c805"
                        },
                        new
                        {
                            UserId = "39b465e2-c398-494f-bb62-d1eb02aa5471",
                            RoleId = "c2d4b743-d9da-443c-9f5a-c2682750c805"
                        },
                        new
                        {
                            UserId = "cc2a0eb3-8736-441d-9130-5b421db3ac0e",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "423e498c-fc67-4853-ac4f-f3cd91d32e87",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "78c5228f-f600-4545-abcd-f4cc21d18e4c",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "6665ddaa-72f9-4f90-a6b1-43eb68dea610",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "6b30cb05-12f7-46c2-b95f-8d783c1f9eb1",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "308da0db-e863-4814-8930-de3540e5406d",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "927e4f6a-62ed-4e13-b002-7e133eb47bbc",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "e7610feb-110c-47d0-9a88-1bfdc12742a4",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "e9012ef1-cd3c-49a1-8726-7f8f8aba9f98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "110391da-0c82-44db-842d-b15002ccd996",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lilsuperadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            LastName = "Lil",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILSUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "LILSUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAP9mDt0Df4ivMvMHvnD+cAtkNQt8UUmo+WetzK+e01t7Q9MY+ccn1QJUsWYhQwaMw==",
                            PhoneNumber = "0901234573",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lilsuperadmin@gmail.com"
                        },
                        new
                        {
                            Id = "3b488e0f-eb92-4994-a555-cbe4ecdf3672",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db7bbacf-3d91-4c6b-b0ca-e8e2be6f198a",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yungadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Yung",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUNGADMIN@GMAIL.COM",
                            NormalizedUserName = "YUNGADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGI/lfRjQ0qvApaeKAaZqb3JIEfPQc+4/5p1cEELOFWKb3ktRA251QXOHJX4YoBRyA==",
                            PhoneNumber = "0901234576",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "yungadmin@gmail.com"
                        },
                        new
                        {
                            Id = "52999f6b-a605-45b0-b98f-b8880fc46027",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c30fccbf-6f05-40a7-9995-287a923154e7",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trankieuloan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loan",
                            LastName = "Trần Kiều",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANKIEULOAN@GMAIL.COM",
                            NormalizedUserName = "TRANKIEULOAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGeo3ZwJ8wvz2W1UdD8a/QKdTZ7FrruJxNulMDD1o6WJl0V3Fr3UVMIWDWZusADBGg==",
                            PhoneNumber = "0901234581",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "trankieuloan@gmail.com"
                        },
                        new
                        {
                            Id = "39b465e2-c398-494f-bb62-d1eb02aa5471",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f075f851-36c1-415b-b931-b6bc9b2183d8",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phamvinhson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sơn",
                            LastName = "Phạm Vĩnh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHAMVINHSON@GMAIL.COM",
                            NormalizedUserName = "PHAMVINHSON@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBKBy4YooS/nnEObobrUW2buXDu2Kjj3dzUGs5vQGLGUvupLU0YeTOOg5ykQUWRlQA==",
                            PhoneNumber = "0901234586",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phamvinhson@gmail.com"
                        },
                        new
                        {
                            Id = "cc2a0eb3-8736-441d-9130-5b421db3ac0e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72527f32-7330-4cc2-9841-12deefab222d",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "caobaquat@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quát",
                            LastName = "Cao Bá",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOBAQUAT@GMAIL.COM",
                            NormalizedUserName = "CAOBAQUAT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFP9nOBwdNrF8P5/g4Kj/VCQ3HT5Ax6tQ+TF4MNInC/Pk4ql+Go5nl4Gnggyv8h+Bg==",
                            PhoneNumber = "0901234570",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caobaquat@gmail.com"
                        },
                        new
                        {
                            Id = "423e498c-fc67-4853-ac4f-f3cd91d32e87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17566af0-914c-4b52-b59d-319d248100c1",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huynhtranthanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thành",
                            LastName = "Huỳnh Trấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYNHTRANTHANH@GMAIL.COM",
                            NormalizedUserName = "HUYNHTRANTHANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDr7SikDidbYwMJYG3vecr6KjYbVigPHkjiFi9rWzJBX0f/vxcLtMINLHVVViwMbYA==",
                            PhoneNumber = "0901234571",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "huynhtranthanh@gmail.com"
                        },
                        new
                        {
                            Id = "78c5228f-f600-4545-abcd-f4cc21d18e4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74a8915f-e1b1-4ea2-be0a-1a2c11d0630f",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenthanhlong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Long",
                            LastName = "Nguyễn Thành",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHLONG@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHLONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGqCQGCeHeA80uY/NBUnr3KILJ0O1KZlUSWAajB5XsPpifcKKttfINVG58dEGPjJzg==",
                            PhoneNumber = "0901234568",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhlong@gmail.com"
                        },
                        new
                        {
                            Id = "6665ddaa-72f9-4f90-a6b1-43eb68dea610",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "972e7006-217d-41a6-a4c2-9285e8db253e",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoxuanhuong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hương",
                            LastName = "Hồ Xuân",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOXUANHUONG@GMAIL.COM",
                            NormalizedUserName = "HOXUANHUONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENM49u9Pt4ALttX4O+1/Zrj6sYuyHUJPZuqYBDx+J1DfI0iALVdEBH6FC9q22f4/bQ==",
                            PhoneNumber = "0901234583",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoxuanhuong@gmail.com"
                        },
                        new
                        {
                            Id = "6b30cb05-12f7-46c2-b95f-8d783c1f9eb1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8a8543c-2a2d-4395-9a13-417227c52ce0",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenhue@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huệ",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENHUE@GMAIL.COM",
                            NormalizedUserName = "NGUYENHUE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ78RXzHhz5VtyHzeVzu0bLDqOZpw6q3hFtxWeOXmhOgAFBLofz43ZL0OAUNWkZNFg==",
                            PhoneNumber = "0901234564",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenhue@gmail.com"
                        },
                        new
                        {
                            Id = "308da0db-e863-4814-8930-de3540e5406d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c71d56f6-9ec9-4d1f-be94-6b3ae17446bf",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phungthanhdo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Độ",
                            LastName = "Phùng Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUNGTHANHDO@GMAIL.COM",
                            NormalizedUserName = "PHUNGTHANHDO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAl0I7f1ccIeUGBlpb9zCK1MgxjNGFgthEsg5ZtLGvGBhp5x/WinE5MeL/eq6dgR/A==",
                            PhoneNumber = "0901234572",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phungthanhdo@gmail.com"
                        },
                        new
                        {
                            Id = "927e4f6a-62ed-4e13-b002-7e133eb47bbc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57075d87-7a3f-44ef-b05b-bc3c0993fe9c",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phantantrung@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trung",
                            LastName = "Phan Tấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHANTANTRUNG@GMAIL.COM",
                            NormalizedUserName = "PHANTANTRUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAoi/L14ZZPl+6ZW92ZCUemZ9SH4nWgbYiFHdqKz5oFTU4HIAhs52jRphRUThLvsdQ==",
                            PhoneNumber = "0901234561",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phantantrung@gmail.com"
                        },
                        new
                        {
                            Id = "e7610feb-110c-47d0-9a88-1bfdc12742a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f633316-ec98-499a-b481-5521e4631b73",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "truongtuantu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tú",
                            LastName = "Trương Tuấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTUANTU@GMAIL.COM",
                            NormalizedUserName = "TRUONGTUANTU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbhcDRNZExSmCCgtssGY9xqVfxam84jyhgWNBD7yQ8Xe8PFEAKtlwMlqJLY5XywAw==",
                            PhoneNumber = "0901234578",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongtuantu@gmail.com"
                        });
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TodoId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TodoId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filemime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TodoId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TodoId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TodoId");

                    b.HasIndex("UserId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonInChargeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonInChargeId");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Comment", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.Todo", "Todo")
                        .WithMany("Comments")
                        .HasForeignKey("TodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Log", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Media", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.Todo", "Todo")
                        .WithMany("Medias")
                        .HasForeignKey("TodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Participant", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.Todo", "Todo")
                        .WithMany("Participants")
                        .HasForeignKey("TodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Team_Todo_Management.Models.Todo", b =>
                {
                    b.HasOne("Team_Todo_Management.Models.ApplicationUser", "PersonInCharge")
                        .WithMany("Todos")
                        .HasForeignKey("PersonInChargeId");
                });
#pragma warning restore 612, 618
        }
    }
}
